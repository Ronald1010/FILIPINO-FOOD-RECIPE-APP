import { supabase } from "../main";

// Function to display recipes in favorites
async function displayRecipesInFavorites() {
  try {
    // Retrieve email from localStorage
    const userEmail = localStorage.getItem("email"); // Replace 'userEmail' with the key used to store the email

    if (!userEmail) {
      console.error("User email not found in localStorage");
      return;
    }

    // Get recipe IDs associated with the user's email stored in the favorites table
    let { data: favorites, error } = await supabase
      .from("favorites")
      .select("recipe_id")
      .eq("email", userEmail); // Assuming the column name storing email is 'email'

    if (error) {
      throw new Error(error.message);
    }

    // Fetch recipe data using the recipe IDs from the recipe table
    let recipesData = [];

    for (let i = 0; i < favorites.length; i++) {
      let recipeId = favorites[i].recipe_id;
      let { data: recipeData, error: recipeError } = await supabase
        .from("recipe")
        .select("*")
        .eq("id", recipeId)
        .single();

      if (recipeError) {
        throw new Error(recipeError.message);
      }

      if (recipeData) {
        recipesData.push(recipeData);
      }
    }

    // Display recipes in the cards
    const cardsFavorite = document.getElementById("cardsFavorite");

    if (cardsFavorite) {
      cardsFavorite.innerHTML = ""; // Clear existing content

      recipesData.forEach((recipe) => {
        // Create a link element to wrap the card structure
        const cardLink = document.createElement("a");
        cardLink.setAttribute("href", "/Recipe/recipe.html"); // Replace YOUR_LINK_HERE with the desired link
        // Add click event listener to each card link
        cardLink.addEventListener("click", (event) => {
          event.preventDefault(); // Prevent default navigation behavior

          // Redirect to the recipe HTML page and pass the recipe ID as a query parameter
          const recipeId = recipe.id;
          window.location.href = `/Recipe/recipe.html?id=${recipeId}`;
        });

        // Create card structure for each recipe
        const card = document.createElement("div");
        card.classList.add("card");
        card.style.width = "320px";
        card.style.marginBottom = "20px"; // You can adjust the margin value as needed

        // Limit the description text
        const truncatedDescription =
          recipe.discreption.length > 80
            ? `${recipe.discreption.slice(0, 80)}...`
            : recipe.discreption;

        card.innerHTML = `
          
          <div class="row g-0 ">
            <div class="col-4 py-2 mt-1 px-2">
              <img
                id="image_path"
                src="${recipe.image_path}" // Replace with the actual image URL from recipe data
                width="100px"
                style="border-radius: 5px"
                alt="Recipe Image"
              />
            </div>
            <div class="col-8">
              <div class="card-body">
                <div class="row">
                  <div class="col-10">
                    <h6 class="card-title" id="dish_name"  style="font-weight: bold">${recipe.dish_name}</h6>
                  </div>
                 
                  <div class="float-end col-2">
                              <a href="#"class="delete-button"
                              ><svg
                              
                                xmlns="http://www.w3.org/2000/svg"
                                width="20"
                                height="20"
                                fill="#ff0000"
                                class="bi bi-trash"
                                viewBox="0 0 16 16"
                              >
                                <path
                                  d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"
                                />
                                <path
                                  d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"
                                />
                              </svg>
                            </a>
                  </div>
                </div>
                <br />
                <p class="card-text"  id="discreption">${truncatedDescription}</p>
              </div>
            </div>
          </div>
          
        `;

        // cardsFavorite.appendChild(card);

        // Append the card inside the cardLink
        cardLink.appendChild(card);

        // Append the cardLink to the cardsFavorite container
        cardsFavorite.appendChild(cardLink);
        // Find the trash button inside the current card
        const deleteButton = card.querySelector(".delete-button");

        // Add click event listener to the trash button
        deleteButton.addEventListener("click", async (event) => {
          event.preventDefault();
          const recipeId = recipe.id;

          // Call the function to delete the recipe from favorites
          await deleteFromFavorites(recipeId);

          // Remove the card from the UI upon successful deletion
          cardLink.remove();
        });
      });
    }
  } catch (err) {
    console.error("Error displaying recipes:", err);
    // Handle/display error if needed
  }
}

// Call the function to display recipes in favorites
displayRecipesInFavorites();

// Function to delete a row in the 'favorites' table
async function deleteFromFavorites(recipeId) {
  try {
    const userEmail = localStorage.getItem("email");

    if (!userEmail) {
      console.error("User email not found in localStorage");
      return;
    }

    // Delete the row from the 'favorites' table based on the recipe ID and user's email
    const { error } = await supabase
      .from("favorites")
      .delete()
      .match({ recipe_id: recipeId, email: userEmail });

    if (error) {
      throw new Error(error.message);
    }

    console.log(`Recipe with ID ${recipeId} deleted from favorites`);
  } catch (err) {
    console.error("Error deleting recipe from favorites:", err);
    // Handle/display error if needed
  }
}
